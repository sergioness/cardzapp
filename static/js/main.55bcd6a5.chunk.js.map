{"version":3,"sources":["serviceWorker.js","components/card/Card.js","components/list/List.js","components/searchbox/Searchbox.js","components/scrollable/Scrollable.js","components/errorboundry/ErrorBoundry.js","components/app/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","info","id","name","email","className","alt","src","List","values","Fragment","map","value","key","Searchbox","type","placeholder","onChange","onSearch","Scrollable","children","ErrorBoundry","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchString","target","filter","list","valueLowerCase","toLocaleLowerCase","listElement","includes","dataList","fetch","then","response","json","filteredDataList","title","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCNSC,EAVF,SAACC,GAAW,IAAD,EACMA,EAAMC,KAAzBC,EADa,EACbA,GAAIC,EADS,EACTA,KAAMC,EADG,EACHA,MACjB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,UAAKH,EAAL,cAAuBI,IAAG,+BAA0BL,EAA1B,mBAClC,4BAAKC,GACL,6BAAMC,KCOHI,EAZF,SAACR,GACV,IAAMS,EAAST,EAAMS,OACrB,OACI,kBAAC,IAAMC,SAAP,KAEID,EAAOE,KAAI,SAACC,GACR,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAMV,GAAID,KAAMW,SCGpCE,EAVG,SAACd,GACf,OACI,yBAAKK,UAAU,OACX,2BAAOU,KAAK,SACLC,YAAY,kBACZX,UAAU,mCACVY,SAAUjB,EAAMkB,aCEpBC,G,MAPI,SAACnB,GAChB,OACI,yBAAKK,UAAU,cACVL,EAAMoB,YCcJC,E,kDAjBX,WAAYrB,GAAQ,IAAD,8BACf,cAAMA,IACDsB,MAAQ,CACTC,UAAU,GAHC,E,gEAQfC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAOC,KAAKF,MAAMC,SACb,0DACCC,KAAKxB,MAAMoB,a,GAfEM,IAAMC,WCkDlBC,G,wDA5CX,WAAY5B,GAAQ,IAAD,8BACf,gBAOJ6B,eAAiB,SAACC,GACd,EAAKL,SAAS,CACVM,aAAcD,EAAME,OAAOpB,SAVhB,EAcnBqB,OAAS,SAACC,EAAMtB,GACZ,IAAMuB,EAAiBvB,EAAMwB,oBAC7B,OAAOF,EAAKD,QAAO,SAACI,GAChB,OAAOA,EAAYlC,KAAKiC,oBAAoBE,SAASH,OAfzD,EAAKb,MAAQ,CACTS,aAAc,GACdQ,SAAU,IAJC,E,gEAqBE,IAAD,OAChBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKlB,SAAS,CAACc,SAAUI,S,+BAIvC,IAAMC,EAAmBpB,KAAKS,OAAOT,KAAKF,MAAMiB,SAAUf,KAAKF,MAAMS,cACrE,OACI,kBAAC,IAAMrB,SAAP,KACI,yBAAKL,UAAU,MACX,wBAAIA,UAAU,MAAMmB,KAAKxB,MAAM6C,OAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAW3B,SAAUM,KAAKK,iBAC1B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAMpB,OAAQmC,Y,GArCxBlB,IAAMC,YCCxBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKH,MAAM,cAEbI,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAAAa,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55bcd6a5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {id, name, email} = props.info;\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt={`${name} thumbnail`} src={`https://robohash.org/${id}?size=128x128`}/>\r\n            <h2>{name}</h2>\r\n            <div>{email}</div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/Card';\r\n\r\nconst List = (props) => {\r\n    const values = props.values;\r\n    return (\r\n        <React.Fragment>\r\n        {\r\n            values.map((value) => {\r\n                return (<Card key={value.id} info={value}/>);\r\n            })\r\n        }\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default List;","import React from 'react';\r\n\r\nconst Searchbox = (props) => {\r\n    return (\r\n        <div className='ma2'>\r\n            <input type='search'\r\n                   placeholder='search for card'\r\n                   className='pa2 ba b--green bg-lightest-blue'\r\n                   onChange={props.onSearch}></input>\r\n        </div>\r\n    );\r\n};\r\nexport default Searchbox;","import React from 'react';\r\nimport './Scrollable.css';\r\n\r\nconst Scrollable = (props) => {\r\n    return (\r\n        <div className='scrollable'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scrollable;","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n            (<h1>Oops! Something went wrong</h1>)\r\n            : this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport List from '../list/List';\r\nimport Searchbox from '../searchbox/Searchbox';\r\nimport Scrollable from '../scrollable/Scrollable';\r\nimport ErrorBoundry from '../errorboundry/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            searchString: '',\r\n            dataList: []\r\n        };\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({\r\n            searchString: event.target.value\r\n        });\r\n    }\r\n\r\n    filter = (list, value) => {\r\n        const valueLowerCase = value.toLocaleLowerCase();\r\n        return list.filter((listElement) => {\r\n            return listElement.name.toLocaleLowerCase().includes(valueLowerCase);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(json => this.setState({dataList: json}));\r\n    }\r\n\r\n    render() {\r\n        const filteredDataList = this.filter(this.state.dataList, this.state.searchString);\r\n        return (\r\n            <React.Fragment>\r\n                <div className='tc'>\r\n                    <h1 className='f1'>{this.props.title}</h1>\r\n                    <ErrorBoundry>\r\n                        <Searchbox onSearch={this.onSearchChange}/>\r\n                        <Scrollable>\r\n                            <List values={filteredDataList}/>\r\n                        </Scrollable>\r\n                    </ErrorBoundry>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'tachyons';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './components/app/App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App title='Cardzapp'/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}